#!/usr/bin/env ruby
# Create and migrate the database specified in the $DATABASE_URL environment
# variable.
#
# Usage: script/setup [--verbose] [--rebuild]
#
# Options:
#   --rebuild: drop the database before creating it
#   --verbose: print errors and warnings from postgres

$stdout.sync = true

lib = File.expand_path(File.join('..', '..', 'lib'), __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'bundler/setup'
require 'bundler_api/env'
require 'bundler_api/cache'
require 'bundler_api/redis'
require 'sequel'
require 'open3'

def rebuild?
  @rebuild ||= ARGV.delete('--rebuild')
end

def verbose?
  @verbose ||= (ARGV.delete('-v') || ARGV.delete('--verbose'))
end

def run_command(*args)
  output, status = Open3.capture2e(*args)
  print_output(output, !status.success? || verbose?)
  abort unless status.success?
end

def print_output(output, verbose)
  return if !verbose || output.empty?
  output.lines.each do |line|
    puts "  #{line}"
  end
  puts
end

def print_error(title, error)
  return unless verbose?
  $stderr.puts "#{title}: #{error}"

  error.backtrace.each do |line|
    $stderr.puts "  #{line}"
  end
end

# must be a valid uri, e.g
#   postgres://user:pass@host:80/path
def database_url
  ENV['DATABASE_URL']
end

def conn_info
  uri = URI.parse database_url
  params = []
  params.concat ["--host", uri.host] if uri.host
  params.concat ["--port", uri.port.to_s] if uri.port
  params.concat ["--username", uri.user] if uri.user
  params.concat ["--password", uri.password] if uri.password
  params
end

def database_name
  File.basename(database_url)
end

def postgres_installed?
  !`which psql`.strip.empty?
end

def database_exists?
  Sequel.connect(database_url) do |db|
    db.test_connection
  end

  true
rescue
  false
end

def postgres_ready?
  Sequel.connect(database_url) do |db|
    db[:versions].first
  end

  true
rescue => e
  print_error "Postgres error", e
  false
end

def redis_ready?
  BundlerApi.redis.ping
  true
rescue => e
  print_error "Redis error", e
  false
end

def memcached_ready?
  BundlerApi::CacheInvalidator.new.memcached_client.alive!
  true
rescue => e
  print_error "Memcached error", e
  false
end

def verify_dependencies
  puts 'Checking dependencies'
  unmet = []
  unmet << 'postgres' unless postgres_ready?
  unmet << 'redis' unless redis_ready?
  unmet << 'memcached' unless memcached_ready?

  unless unmet.empty?
    $stderr.puts 'You have dependencies that are unmet or are not available:'

    unmet.each do |dependency|
      $stderr.puts "  * #{dependency}"
    end
  end
end

abort 'DATABASE_URL environment variable required' unless database_url

if rebuild?
  puts 'Dropping database'
  run_command(*['dropdb', '--if-exists', conn_info, database_name].flatten)
end

unless database_exists?
  unless postgres_installed?
    abort 'Please install postgresql or specify a connection to an existing database in .env.local'
  end

  puts "Creating database: #{database_url}"
  run_command(*['createdb', conn_info, database_name].flatten)
end

puts 'Migrating database'
run_command(*%W{sequel --migrate-directory db/migrations #{database_url}})

verify_dependencies

puts "
Done! \
Run `rake update` and `rake fix_deps` to populate the database with \
all gems from rubygems.org."
