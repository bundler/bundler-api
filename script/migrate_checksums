#!/usr/bin/env ruby

lib = File.expand_path(File.join('..', '..', 'lib'), __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'bundler/setup'
require 'bundler_api/env'
require 'open3'
require 'sequel'
require 'compact_index'
require 'bundler_api/gem_info'


## helpers

def database_name(database_url)
  File.basename(database_url)
end

def get_temp_database_url
  database_url = ENV['DATABASE_URL']
  abort 'DATABASE_URL environment variable required' unless database_url
  database_url + Time.now.to_i.to_s
end




## main commands

def drop_database(database_url)
  puts 'Dropping database'
  puts %x{/usr/bin/dropdb --if-exists #{database_name(database_url)}}
end

def create_database(database_url)
  puts 'Creating database'
  puts %x{/usr/bin/createdb --no-password #{database_name(database_url)}}
end

def import(database_url, sql_file)
  puts "Importing #{sql_file} data"
  puts %x{/usr/bin/psql -d #{database_name(database_url)} -c "CREATE EXTENSION hstore"}
  puts %x{/usr/bin/psql -d #{database_name(database_url)} < #{sql_file}}
end

def migrate_checksums(temp_database_url, database_url)
  puts "migrating checksum"
  temp_db = Sequel.connect temp_database_url
  db = Sequel.connect database_url

  versions_with_nil_checksum = db[:rubygems]
    .join(:versions, rubygem_id: :id)
    .where(checksum: nil)

  versions_with_nil_checksum.each do |entry|
    checksum = temp_db[:versions]
      .join(:rubygems, id: :rubygem_id)
      .where(name: entry[:name], number: entry[:number])
      .first[:sha256]
    db[:versions].where(id: entry[:id]).update(checksum: checksum)
  end
end

def migrate_info_checksums(database_url)
  puts "migrating info_checksum"
  db = Sequel.connect database_url

  gem_info = BundlerApi::GemInfo.new(db)

  versions_with_nil_info_checksum = db[:rubygems]
    .join(:versions, rubygem_id: :id)
    .where(info_checksum: nil)

  info_checksums = {} # table with info_checksum per gem name
  versions_with_nil_info_checksum.each do |entry|

    # Fill table if there is no info checksum for this gem name
    unless info_checksums[entry[:name]]
      deps = gem_info.deps_for([entry[:name]])
      deps.each do |dep|
        dep[:dependencies].map! { |d| { gem: d[0], version: d[1] } }
      end
      info_checksums[entry[:name]] = Digest::MD5.hexdigest(CompactIndex.info(deps))
    end

    db[:versions].where(id: entry[:id]).update(info_checksum: info_checksums[entry[:name]])
  end
end

## main

sql_file = ARGV.first
temp_database_url = get_temp_database_url
database_url = ENV['DATABASE_URL']

drop_database(temp_database_url)
create_database(temp_database_url)
begin
  import(temp_database_url,sql_file)
  migrate_checksums(temp_database_url, database_url)
  migrate_info_checksums(database_url)
ensure
  drop_database(temp_database_url)
end
